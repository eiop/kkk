// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateExistingThings {
  count: Int!
}

type AggregateMissingThings {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type ExistingThings {
  id: ID!
  titel: String!
  body: String!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ExistingThingsConnection {
  pageInfo: PageInfo!
  edges: [ExistingThingsEdge]!
  aggregate: AggregateExistingThings!
}

input ExistingThingsCreateInput {
  id: ID
  titel: String!
  body: String!
  user: UserCreateOneInput!
}

type ExistingThingsEdge {
  node: ExistingThings!
  cursor: String!
}

enum ExistingThingsOrderByInput {
  id_ASC
  id_DESC
  titel_ASC
  titel_DESC
  body_ASC
  body_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ExistingThingsPreviousValues {
  id: ID!
  titel: String!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ExistingThingsSubscriptionPayload {
  mutation: MutationType!
  node: ExistingThings
  updatedFields: [String!]
  previousValues: ExistingThingsPreviousValues
}

input ExistingThingsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExistingThingsWhereInput
  AND: [ExistingThingsSubscriptionWhereInput!]
  OR: [ExistingThingsSubscriptionWhereInput!]
  NOT: [ExistingThingsSubscriptionWhereInput!]
}

input ExistingThingsUpdateInput {
  titel: String
  body: String
  user: UserUpdateOneRequiredInput
}

input ExistingThingsUpdateManyMutationInput {
  titel: String
  body: String
}

input ExistingThingsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  titel: String
  titel_not: String
  titel_in: [String!]
  titel_not_in: [String!]
  titel_lt: String
  titel_lte: String
  titel_gt: String
  titel_gte: String
  titel_contains: String
  titel_not_contains: String
  titel_starts_with: String
  titel_not_starts_with: String
  titel_ends_with: String
  titel_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  user: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ExistingThingsWhereInput!]
  OR: [ExistingThingsWhereInput!]
  NOT: [ExistingThingsWhereInput!]
}

input ExistingThingsWhereUniqueInput {
  id: ID
  body: String
}

scalar Long

type MissingThings {
  id: ID!
  titel: String!
  body: String!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type MissingThingsConnection {
  pageInfo: PageInfo!
  edges: [MissingThingsEdge]!
  aggregate: AggregateMissingThings!
}

input MissingThingsCreateInput {
  id: ID
  titel: String!
  body: String!
  user: UserCreateOneInput!
}

type MissingThingsEdge {
  node: MissingThings!
  cursor: String!
}

enum MissingThingsOrderByInput {
  id_ASC
  id_DESC
  titel_ASC
  titel_DESC
  body_ASC
  body_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MissingThingsPreviousValues {
  id: ID!
  titel: String!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type MissingThingsSubscriptionPayload {
  mutation: MutationType!
  node: MissingThings
  updatedFields: [String!]
  previousValues: MissingThingsPreviousValues
}

input MissingThingsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MissingThingsWhereInput
  AND: [MissingThingsSubscriptionWhereInput!]
  OR: [MissingThingsSubscriptionWhereInput!]
  NOT: [MissingThingsSubscriptionWhereInput!]
}

input MissingThingsUpdateInput {
  titel: String
  body: String
  user: UserUpdateOneRequiredInput
}

input MissingThingsUpdateManyMutationInput {
  titel: String
  body: String
}

input MissingThingsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  titel: String
  titel_not: String
  titel_in: [String!]
  titel_not_in: [String!]
  titel_lt: String
  titel_lte: String
  titel_gt: String
  titel_gte: String
  titel_contains: String
  titel_not_contains: String
  titel_starts_with: String
  titel_not_starts_with: String
  titel_ends_with: String
  titel_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  user: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MissingThingsWhereInput!]
  OR: [MissingThingsWhereInput!]
  NOT: [MissingThingsWhereInput!]
}

input MissingThingsWhereUniqueInput {
  id: ID
  body: String
}

type Mutation {
  createExistingThings(data: ExistingThingsCreateInput!): ExistingThings!
  updateExistingThings(data: ExistingThingsUpdateInput!, where: ExistingThingsWhereUniqueInput!): ExistingThings
  updateManyExistingThingses(data: ExistingThingsUpdateManyMutationInput!, where: ExistingThingsWhereInput): BatchPayload!
  upsertExistingThings(where: ExistingThingsWhereUniqueInput!, create: ExistingThingsCreateInput!, update: ExistingThingsUpdateInput!): ExistingThings!
  deleteExistingThings(where: ExistingThingsWhereUniqueInput!): ExistingThings
  deleteManyExistingThingses(where: ExistingThingsWhereInput): BatchPayload!
  createMissingThings(data: MissingThingsCreateInput!): MissingThings!
  updateMissingThings(data: MissingThingsUpdateInput!, where: MissingThingsWhereUniqueInput!): MissingThings
  updateManyMissingThingses(data: MissingThingsUpdateManyMutationInput!, where: MissingThingsWhereInput): BatchPayload!
  upsertMissingThings(where: MissingThingsWhereUniqueInput!, create: MissingThingsCreateInput!, update: MissingThingsUpdateInput!): MissingThings!
  deleteMissingThings(where: MissingThingsWhereUniqueInput!): MissingThings
  deleteManyMissingThingses(where: MissingThingsWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  existingThings(where: ExistingThingsWhereUniqueInput!): ExistingThings
  existingThingses(where: ExistingThingsWhereInput, orderBy: ExistingThingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ExistingThings]!
  existingThingsesConnection(where: ExistingThingsWhereInput, orderBy: ExistingThingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExistingThingsConnection!
  missingThings(where: MissingThingsWhereUniqueInput!): MissingThings
  missingThingses(where: MissingThingsWhereInput, orderBy: MissingThingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MissingThings]!
  missingThingsesConnection(where: MissingThingsWhereInput, orderBy: MissingThingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MissingThingsConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  existingThings(where: ExistingThingsSubscriptionWhereInput): ExistingThingsSubscriptionPayload
  missingThings(where: MissingThingsSubscriptionWhereInput): MissingThingsSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`